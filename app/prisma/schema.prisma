// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum StoryType {
  BIOGRAPHY
  COLOUR
}

model Faction {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  description String     @db.Text
  url         String
  imageUrl    String
  Id          Champion[]
}

model Champion {
  id          Int       @id @default(autoincrement())
  name        String
  title       String?
  slug        String    @unique
  releaseDate DateTime?
  factionId   Int?
  url         String
  imageUrl    String

  faction         Faction?          @relation(fields: [factionId], references: [id], onDelete: Cascade)
  ChampionStories ChampionStories[]
}

model Story {
  id              Int               @id @default(autoincrement())
  title           String
  textId          String            @unique
  imageUrl        String
  htmlStory       String            @db.LongText
  type            StoryType
  File            File[]
  ChampionStories ChampionStories[]
}

model ChampionStories {
  champion   Champion @relation(fields: [championId], references: [id])
  championId Int
  story      Story    @relation(fields: [storyId], references: [id])
  storyId    Int

  @@id([championId, storyId])
  @@unique([championId, storyId])
}

model File {
  id       Int    @id @default(autoincrement())
  savePath String
  filename String
  storyId  Int

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}
